[{"id":"15911e4c.126402","type":"http in","z":"52c0224e.2c4bfc","name":"","url":"/start","method":"get","swaggerDoc":"","x":114,"y":215,"wires":[["70332f5d.bb1a9"]]},{"id":"89eca9d6.f28178","type":"http response","z":"52c0224e.2c4bfc","name":"","x":650,"y":260,"wires":[]},{"id":"d92e2ec4.6a0a3","type":"http in","z":"52c0224e.2c4bfc","name":"","url":"/stop","method":"get","swaggerDoc":"","x":114,"y":315,"wires":[["21fd055a.e9b97a"]]},{"id":"21fd055a.e9b97a","type":"function","z":"52c0224e.2c4bfc","name":"stop","func":"msg.payload = 'stop';\nreturn msg;","outputs":1,"noerr":0,"x":264,"y":315,"wires":[["61960955.25a828","c3bc730a.9e0ba"]]},{"id":"70332f5d.bb1a9","type":"function","z":"52c0224e.2c4bfc","name":"start","func":"msg.payload = 'start';\nreturn msg;","outputs":1,"noerr":0,"x":264,"y":215,"wires":[["c3bc730a.9e0ba"]]},{"id":"9bceaa31.66c378","type":"comment","z":"52c0224e.2c4bfc","name":"Start/stop camera","info":"Start/stop camera","x":126,"y":72,"wires":[]},{"id":"f4e5579d.545418","type":"function","z":"52c0224e.2c4bfc","name":"readImgBuffer","func":"var fs = global.get('fs');\n\n// function to encode file data to base64 encoded string\nfunction base64_encode(file) {\n    // read binary data\n    var bitmap = fs.readFileSync(file);\n    // convert binary data to base64 encoded string\n    return new Buffer(bitmap).toString('base64');\n}\n\nmsg.payload = base64_encode(msg.payload);\n\nreturn msg;","outputs":1,"noerr":0,"x":700,"y":60,"wires":[["87654816.7a66d8"]]},{"id":"87654816.7a66d8","type":"websocket out","z":"52c0224e.2c4bfc","name":"","server":"a0de8fd7.5988e","client":"","x":910,"y":60,"wires":[]},{"id":"e992f571.14c5a8","type":"inject","z":"52c0224e.2c4bfc","name":"start","topic":"","payload":"start","payloadType":"str","repeat":"","crontab":"","once":false,"x":104,"y":155,"wires":[["70332f5d.bb1a9"]]},{"id":"a3a2df93.3bf4d","type":"inject","z":"52c0224e.2c4bfc","name":"stop","topic":"","payload":"stop","payloadType":"str","repeat":"","crontab":"","once":false,"x":104,"y":375,"wires":[["21fd055a.e9b97a"]]},{"id":"b8e1db8a.db5558","type":"python-function","z":"52c0224e.2c4bfc","name":"Motion detection","func":"import cv2\nimport os\nimport os.path\nimport datetime\n\nfrom os import listdir\nfrom os.path import isfile, join\n\ndelta_thresh = 10\nmin_area = 1800\n\navg = None\nfilePath = msg['payload']\ndirname = os.path.dirname(filePath)\nfileWithExt=os.path.splitext(os.path.basename(filePath))\nprev_filePath = dirname + \"/\" + fileWithExt[0] + \"_prev\" + fileWithExt[1]\n\nframe = cv2.imread(filePath)\n\nif os.path.exists(prev_filePath) == False:\n    cv2.imwrite(prev_filePath, frame)\n    return msg\n\n# get the frame, convert it to grayscale, and blur it\ngray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\ngray = cv2.GaussianBlur(gray, (21, 21), 0)\n\n# get the prev frame, convert it to grayscale, and blur it\nprev_frame = cv2.imread(prev_filePath)\nprev_frame_gray = cv2.cvtColor(prev_frame, cv2.COLOR_BGR2GRAY)\nprev_frame_gray = cv2.GaussianBlur(prev_frame_gray, (21, 21), 0)\n\n\navg = prev_frame_gray.copy().astype(\"float\")\n\n# accumulate the weighted average between the current frame and\n# previous frames, then compute the difference between the current\n# frame and running average\ncv2.accumulateWeighted(gray, avg, 0.65)\nframeDelta = cv2.absdiff(gray, cv2.convertScaleAbs(avg))\n\n# threshold the delta image, dilate the thresholded image to fill\n# in holes, then find contours on thresholded image\nthresh = cv2.threshold(frameDelta, delta_thresh, 255,\n\tcv2.THRESH_BINARY)[1]\nthresh = cv2.dilate(thresh, None, iterations=2)\n(im2, cnts, _) = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,\n\tcv2.CHAIN_APPROX_SIMPLE)\n\nfound = False\nframeCopy = frame.copy()\n\n# safe as previous frame\ncv2.imwrite(prev_filePath, frame)\n\n# loop over the contours\nfor c in cnts:\n\t# if the contour is too small, ignore it\n\tif cv2.contourArea(c) < min_area:\n\t\tcontinue\n\n\t# compute the bounding box for the contour, draw it on the frame,\n\t# and update the text\n\t(x, y, w, h) = cv2.boundingRect(c)\n\tcv2.rectangle(frameCopy, (x, y), (x + w, y + h), (0, 0, 255), 2)\n\tcv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)\n\tfound = True\n\n\nif found == True:\n    dateStringFileName = datetime.datetime.now().strftime(\"%A %d %B %Y %I:%M:%S%p\") + '.jpg'\n    directory = '/home/pi/detected_images/'\n    \n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        \n    onlyfiles = [f for f in listdir(directory) if isfile(join(directory, f))]\n    \n    cv2.imwrite(directory + str(len(onlyfiles)).zfill(6) + \"_\" + dateStringFileName, frameCopy)\n    cv2.imwrite(filePath, frame)\n\nreturn msg","outputs":"1","x":690,"y":160,"wires":[["f4e5579d.545418"]]},{"id":"c3bc730a.9e0ba","type":"function","z":"52c0224e.2c4bfc","name":"loop","func":"// Loop function\n// Top output provides triger for next actions\n// Botton output should be connected to the input through a dealy\n// The msg.payload can consis one of actions: start, stop, toggle\n// Other content is ignored\n// On the outoput the msg.payload contains current loop state\n\ncontext.loop = context.loop || \"stop\";\ncontext.loops = context.loops || 0;\n\n//console.log(\"topic :\" + msg.topic);\n//console.log(\"loop  :\" + context.loop);\n//console.log(\"loops :\" + context.loops);\n//console.log(\"action:\" + msg.payload);\n\nswitch (msg.payload) {\n\tcase \"stop\":\n\t\tcontext.loops = context.loops + 1;\n\t\tmsg.payload = \"stopped\";\n\t\tcontext.loop = \"stop\";\n\t\treturn [msg,msg];\n\tcase \"toggle\":\n\t\tif (context.loop == \"start\") {\n\t\t\tmsg.payload = \"stopped\";\n\t\t\tcontext.loop = \"stop\";\n\t\t\treturn [msg,null];\n\t\t} else {\n\t\t\tmsg.payload = \"started\";\n\t\t\tcontext.loop = \"loop\";\n\t\t\tcontext.loops = 1;\n\t\t\treturn [msg,msg];\n\t\t}\n\tcase \"start\":\n\t\tmsg.payload = \"started\";\n\t\tif (context.loop == \"loop\")\n\t\t    return [msg,null];\n\t\tcontext.loop = \"loop\";\n\t    context.loops = 1;\n\t\treturn [msg,msg];\n\tdefault:\n\t\tif (context.loop == \"loop\") {\n\t\t\tcontext.loops = context.loops + 1;\n\t\t\tmsg.payload = \"loop:\" + context.loops;\n\t\t\treturn [null, msg];\n\t\t} else {\n\t\t\treturn [null,null]; \n\t\t}\n}","outputs":"2","noerr":1,"x":470,"y":260,"wires":[["89eca9d6.f28178"],["3f17921e.bb204e"]]},{"id":"3f17921e.bb204e","type":"python-function","z":"52c0224e.2c4bfc","name":"Camera","func":"import os\n\nfileName = '/home/pi/imagetest.jpg'\ncommand = \"raspistill -n -co 30 -sh 40 -br 60 -t 2500 -ex night -w 800 -h 600 -o \" + fileName\nos.system(command)\n\nmsg['payload'] = fileName\n\nreturn msg","outputs":1,"x":480,"y":160,"wires":[["c3bc730a.9e0ba","b8e1db8a.db5558"]]},{"id":"61960955.25a828","type":"python-function","z":"52c0224e.2c4bfc","name":"Kill camera","func":"import os\n\nos.system(\"killall -9 raspistill\")\n\nreturn msg","outputs":"0","x":410,"y":360,"wires":[]},{"id":"a0de8fd7.5988e","type":"websocket-listener","z":"","path":"/ws/streaming","wholemsg":"false"}]
